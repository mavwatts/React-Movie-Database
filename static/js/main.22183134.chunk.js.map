{"version":3,"sources":["Components/Search.js","Components/Result.js","Components/Results.js","Components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","src","Poster","alt","onClick","imdbID","Title","Results","results","map","key","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","s","state","setState","apiurl","e","target","value","prevState","axios","then","data","id","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yOAeeA,MAbf,YAAwC,IAAvBC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,OAC1B,OACI,6BAASC,UAAU,kBACf,2BACAC,KAAK,OACLC,YAAY,qBAAqBF,UAAU,YAC3CG,SAAUL,EACVM,WAAYL,MCETM,MATf,YAAsC,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,UACrB,OACI,yBAAKP,UAAU,UACX,yBAAKQ,IAAKF,EAAOG,OAAQC,IAAI,eAAeC,QAAS,kBAAMJ,EAAUD,EAAOM,WAC5E,4BAAKN,EAAOO,SCOTC,MAVf,YAAwC,IAAtBC,EAAqB,EAArBA,QAASR,EAAY,EAAZA,UACvB,OACI,6BAASP,UAAU,WACde,EAAQC,KAAI,SAAAV,GAAM,OACf,kBAAC,EAAD,CAAQW,IAAKX,EAAOM,OAAQN,OAAQA,EAAQC,UAAWA,SCkBxDW,MAvBf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACzB,OACE,6BAASpB,UAAU,SACjB,yBAAKA,UAAU,WACb,4BACGmB,EAASN,MACV,kCAAQM,EAASE,KAAjB,MAEF,uBAAGrB,UAAU,UAAb,UACYmB,EAASG,YAErB,yBAAKtB,UAAU,QACX,yBAAKQ,IAAOW,EAASV,SACrB,2BAAIU,EAASI,OAEjB,4BAAQvB,UAAU,QAAQW,QAASS,GAAnC,Y,gBC0DOI,MAlEf,WAAe,MAEaC,mBAAS,CACjCC,EAAG,GACHX,QAAS,GACTI,SAAU,KALC,mBAENQ,EAFM,KAECC,EAFD,KAOPC,EAAS,0CAwCf,OACE,yBAAK7B,UAAU,OACb,gCACE,+CAEF,8BACE,kBAAC,EAAD,CAAQF,YAhCM,SAAAgC,GAClB,IAAIJ,EAAII,EAAEC,OAAOC,MAEjBJ,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBP,EAAGA,QA4BU3B,OA5CzB,SAAA+B,GACC,UAAVA,EAAEb,KACJiB,IAAML,EAAS,MAAQF,EAAMD,GAAGS,MAAK,YAAe,IAC9CpB,EAD6C,EAAXqB,KACnBvC,OAEnB+B,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBlB,QAASA,aAuClC,kBAAC,EAAD,CAASA,QAASY,EAAMZ,QAASR,UAzBrB,SAAA8B,GAChBH,IAAML,EAAS,MAAQQ,GAAIF,MAAK,YAAe,IACzC7B,EADwC,EAAX8B,KAGjCE,QAAQC,IAAIjC,GAEZsB,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBd,SAAUb,aAoBD,oBAAxBqB,EAAMR,SAASN,OACrB,kBAAC,EAAD,CAAOM,SAAUQ,EAAMR,SAAUC,WAhBtB,WACjBQ,GAAS,SAAAK,GACP,OAAO,eAAKA,EAAZ,CAAuBd,SAAU,cCxCnBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.22183134.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Search({handleInput, search}) {\n    return (\n        <section className=\"searchbox-wrap\">\n            <input \n            type='text' \n            placeholder=\"Search for a movie\" className='searchbox' \n            onChange={handleInput} \n            onKeyPress={search}\n            />\n        </section>\n    )\n}\n\nexport default Search\n","import React from 'react'\n\nfunction Result({result, openPopup}) {\n    return (\n        <div className=\"result\">\n            <img src={result.Poster} alt='Movie Poster' onClick={() => openPopup(result.imdbID)}/>\n            <h3>{result.Title}</h3>\n         </div>\n    )\n}\n\nexport default Result\n","import React from 'react';\nimport Result from './Result'\n\nfunction Results({results, openPopup}) {\n    return (\n        <section className=\"results\">\n            {results.map(result => (\n                <Result key={result.imdbID} result={result} openPopup={openPopup}/>\n            ))}\n        </section>\n    )\n}\n\nexport default Results\n","import React from \"react\";\n\nfunction Popup({ selected, closePopup }) {\n  return (\n    <section className=\"popup\">\n      <div className=\"content\">\n        <h2>\n          {selected.Title}\n          <span>({selected.Year})</span>\n        </h2>\n        <p className='rating'>\n            Rating:{selected.imdbRating}\n        </p>\n        <div className='plot'>\n            <img src = {selected.Poster} />\n            <p>{selected.Plot}</p>\n        </div>\n        <button className='close' onClick={closePopup}>\n            Close\n        </button>\n      </div>\n    </section>\n  );\n}\n\nexport default Popup;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Search from \"./Components/Search\";\nimport Results from \"./Components/Results\";\nimport Popup from \"./Components/Popup\";\nimport axios from \"axios\";\n\n\n\nfunction App() {\n  //be706a1d\n  const [state, setState] = useState({\n    s: \"\", //search query\n    results: [],\n    selected: {}\n  });\n  const apiurl = \"http://www.omdbapi.com/?apikey=be706a1d\";\n\n  const search = e => {\n    if (e.key === \"Enter\") {\n      axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\n        let results = data.Search;\n\n        setState(prevState => {\n          return { ...prevState, results: results };\n        });\n      });\n    }\n  };\n\n  const handleInput = e => {\n    let s = e.target.value;\n\n    setState(prevState => {\n      return { ...prevState, s: s };\n    });\n  };\n\n  const openPopup = id => {\n    axios(apiurl + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n\n      console.log(result)\n\n      setState(prevState => {\n        return { ...prevState, selected: result };\n      });\n    });\n  };\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} };\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Movie Database</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={search} />\n        <Results results={state.results} openPopup={openPopup}/>\n\n        {typeof state.selected.Title != \"undefined\" ? (\n          <Popup selected={state.selected} closePopup={closePopup} />\n        ) : (\n          false\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}